/*
* generated by Xtext
*/
grammar InternalPersons;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.senacor.mdsd.hh.splitgreeter.persons.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.senacor.mdsd.hh.splitgreeter.persons.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.senacor.mdsd.hh.splitgreeter.persons.services.PersonsGrammarAccess;

}

@parser::members {
 
 	private PersonsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PersonsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getPersonsAssignment()); }
(rule__Model__PersonsAssignment)*
{ after(grammarAccess.getModelAccess().getPersonsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePerson
entryRulePerson 
:
{ before(grammarAccess.getPersonRule()); }
	 rulePerson
{ after(grammarAccess.getPersonRule()); } 
	 EOF 
;

// Rule Person
rulePerson
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPersonAccess().getGroup()); }
(rule__Person__Group__0)
{ after(grammarAccess.getPersonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Person__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__0__Impl
	rule__Person__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getPersonKeyword_0()); }

	'Person' 

{ after(grammarAccess.getPersonAccess().getPersonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__1__Impl
	rule__Person__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getNameAssignment_1()); }
(rule__Person__NameAssignment_1)
{ after(grammarAccess.getPersonAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__2__Impl
	rule__Person__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getFirstnameKeyword_2()); }

	'firstname' 

{ after(grammarAccess.getPersonAccess().getFirstnameKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__3__Impl
	rule__Person__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getFnAssignment_3()); }
(rule__Person__FnAssignment_3)
{ after(grammarAccess.getPersonAccess().getFnAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__4__Impl
	rule__Person__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getLastnameKeyword_4()); }

	'lastname' 

{ after(grammarAccess.getPersonAccess().getLastnameKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getLnAssignment_5()); }
(rule__Person__LnAssignment_5)
{ after(grammarAccess.getPersonAccess().getLnAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Model__PersonsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0()); }
	rulePerson{ after(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__FnAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getFnSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getPersonAccess().getFnSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__LnAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getLnSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getPersonAccess().getLnSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


