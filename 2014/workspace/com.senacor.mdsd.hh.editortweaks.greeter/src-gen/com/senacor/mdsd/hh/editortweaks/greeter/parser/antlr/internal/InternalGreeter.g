/*
* generated by Xtext
*/
grammar InternalGreeter;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.senacor.mdsd.hh.editortweaks.greeter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.senacor.mdsd.hh.editortweaks.greeter.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.senacor.mdsd.hh.editortweaks.greeter.services.GreeterGrammarAccess;

}

@parser::members {

 	private GreeterGrammarAccess grammarAccess;
 	
    public InternalGreeterParser(TokenStream input, GreeterGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GreeterGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0_0()); 
	    }
		lv_persons_0_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"persons",
        		lv_persons_0_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_1_0()); 
	    }
		lv_greetings_1_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_1_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Person' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPersonAccess().getPersonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='firstname' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPersonAccess().getFirstnameKeyword_2());
    }
(
(
		lv_fn_3_0=RULE_STRING
		{
			newLeafNode(lv_fn_3_0, grammarAccess.getPersonAccess().getFnSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fn",
        		lv_fn_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='lastname' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPersonAccess().getLastnameKeyword_4());
    }
(
(
		lv_ln_5_0=RULE_STRING
		{
			newLeafNode(lv_ln_5_0, grammarAccess.getPersonAccess().getLnSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ln",
        		lv_ln_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='spricht' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPersonAccess().getSprichtKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getLangLanguageEnumRuleCall_7_0()); 
	    }
		lv_lang_7_0=ruleLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"lang",
        		lv_lang_7_0, 
        		"Language");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getGreetingAccess().getGreetwordGreetwordEnumRuleCall_0_0_0()); 
	    }
		lv_greetword_0_0=ruleGreetword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGreetingRule());
	        }
       		set(
       			$current, 
       			"greetword",
        		lv_greetword_0_0, 
        		"Greetword");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getGreetingAccess().getPersonPersonCrossReference_0_1_0()); 
	}

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_0_2());
    }
)
    |(	otherlv_3='Zu' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGreetingAccess().getZuKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getGreetingAccess().getPersonPersonCrossReference_1_1_0()); 
	}

)
)	otherlv_5='sage' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGreetingAccess().getSageKeyword_1_2());
    }
	otherlv_6='ich' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGreetingAccess().getIchKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGreetingAccess().getGreetwordGreetwordEnumRuleCall_1_4_0()); 
	    }
		lv_greetword_7_0=ruleGreetword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGreetingRule());
	        }
       		set(
       			$current, 
       			"greetword",
        		lv_greetword_7_0, 
        		"Greetword");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Rule Greetword
ruleGreetword returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Hallo' 
	{
        $current = grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Huhu' 
	{
        $current = grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Hello' 
	{
        $current = grammarAccess.getGreetwordAccess().getENEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGreetwordAccess().getENEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Bonjour' 
	{
        $current = grammarAccess.getGreetwordAccess().getFREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGreetwordAccess().getFREnumLiteralDeclaration_3()); 
    }
));



// Rule Language
ruleLanguage returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='deutsch' 
	{
        $current = grammarAccess.getLanguageAccess().getDEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLanguageAccess().getDEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='englisch' 
	{
        $current = grammarAccess.getLanguageAccess().getENEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLanguageAccess().getENEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='franz\u00F6sisch' 
	{
        $current = grammarAccess.getLanguageAccess().getFREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLanguageAccess().getFREnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


