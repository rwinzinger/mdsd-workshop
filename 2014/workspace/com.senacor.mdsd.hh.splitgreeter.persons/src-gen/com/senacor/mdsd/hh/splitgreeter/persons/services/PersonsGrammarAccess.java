/*
* generated by Xtext
*/
package com.senacor.mdsd.hh.splitgreeter.persons.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PersonsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPersonsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPersonsPersonParserRuleCall_0 = (RuleCall)cPersonsAssignment.eContents().get(0);
		
		//Model:
		//	persons+=Person*;
		public ParserRule getRule() { return rule; }

		//persons+=Person*
		public Assignment getPersonsAssignment() { return cPersonsAssignment; }

		//Person
		public RuleCall getPersonsPersonParserRuleCall_0() { return cPersonsPersonParserRuleCall_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFirstnameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFnSTRINGTerminalRuleCall_3_0 = (RuleCall)cFnAssignment_3.eContents().get(0);
		private final Keyword cLastnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLnSTRINGTerminalRuleCall_5_0 = (RuleCall)cLnAssignment_5.eContents().get(0);
		
		//Person:
		//	"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING;
		public ParserRule getRule() { return rule; }

		//"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING
		public Group getGroup() { return cGroup; }

		//"Person"
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"firstname"
		public Keyword getFirstnameKeyword_2() { return cFirstnameKeyword_2; }

		//fn=STRING
		public Assignment getFnAssignment_3() { return cFnAssignment_3; }

		//STRING
		public RuleCall getFnSTRINGTerminalRuleCall_3_0() { return cFnSTRINGTerminalRuleCall_3_0; }

		//"lastname"
		public Keyword getLastnameKeyword_4() { return cLastnameKeyword_4; }

		//ln=STRING
		public Assignment getLnAssignment_5() { return cLnAssignment_5; }

		//STRING
		public RuleCall getLnSTRINGTerminalRuleCall_5_0() { return cLnSTRINGTerminalRuleCall_5_0; }
	}
	
	
	private ModelElements pModel;
	private PersonElements pPerson;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PersonsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.senacor.mdsd.hh.splitgreeter.persons.Persons".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	persons+=Person*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Person:
	//	"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING;
	public PersonElements getPersonAccess() {
		return (pPerson != null) ? pPerson : (pPerson = new PersonElements());
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
