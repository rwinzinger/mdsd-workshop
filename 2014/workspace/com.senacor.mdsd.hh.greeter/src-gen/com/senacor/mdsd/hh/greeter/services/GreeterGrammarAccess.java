/*
* generated by Xtext
*/
package com.senacor.mdsd.hh.greeter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GreeterGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPersonsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPersonsPersonParserRuleCall_0_0 = (RuleCall)cPersonsAssignment_0.eContents().get(0);
		private final Assignment cGreetingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_1_0 = (RuleCall)cGreetingsAssignment_1.eContents().get(0);
		
		//// ###########################################
		//// Variante 1
		////
		//// Eine Liste von beliebig vielen Gruessen
		//// 'Hello' und '!' werden als Keywords betrachtet
		//// Als Name wird ein String (in Anfuehrungszeichen) erwartet
		////
		//// Model:
		////   greetings+=Greeting*
		//// ;
		////	
		//// Greeting:
		////   'Hello' name=STRING '!'
		//// ;
		//// ###########################################
		//// Variante 1b 
		////
		//// Analog 1, allerdings wird als Name eine Id erwartet (Zeichenkette ohne Anfuehrungszeichen)
		////
		//// Model:
		////   greetings+=Greeting*
		//// ;
		////	
		//// Greeting:
		////   'Hello' name=ID '!'
		//// ;
		//// ###########################################
		//// Variante 2
		////
		//// Das Grusswort ist in eine eigene Regel ausgelagert, akzeptiert werden
		//// zwei verschiedene Keywords
		////  
		//// Model:
		////	greetings+=Greeting*
		//// ;
		////
		//// Greeting:
		////	Word name=STRING '!'
		//// ;
		////
		//// Word:
		////	'Hello'|'Hallo'
		//// ;
		//// ###########################################
		//// Variante 3
		////
		//// Das Grusswort ist kein Keyword mehr, sondern eine Enum. Enums sind
		//// "Platzhalter" liefern Datentypen und keine Keywords. Deshalb muss eine
		//// Zuweisung an eine Variable erfolgen. Mehrere symbolische Werte koennen
		//// auf eine Enum-Id abgebildet werden.
		//// 
		//// Model:
		////	greetings+=Greeting*
		//// ;	
		//// 
		//// Greeting:
		////	word=Word name=STRING '!'
		//// ;
		////	
		//// enum Word:
		////  DE='Hallo' | DE='Huhu' | 
		////  EN='Hello' | 
		////  FR='Bonjour'
		//// ;
		//// ###########################################
		//// Variante 4
		//// 
		//// Gruss und Person werden nun getrennt voneinander definiert, der Gruss
		//// referenziert die Person. Es kann ueber Dateigrenzen hinweg referenziert
		//// werden - AA ist in einer anderen Datei definiert.
		//Model:
		//	persons+=Person* greetings+=Greeting*;
		public ParserRule getRule() { return rule; }

		//persons+=Person* greetings+=Greeting*
		public Group getGroup() { return cGroup; }

		//persons+=Person*
		public Assignment getPersonsAssignment_0() { return cPersonsAssignment_0; }

		//Person
		public RuleCall getPersonsPersonParserRuleCall_0_0() { return cPersonsPersonParserRuleCall_0_0; }

		//greetings+=Greeting*
		public Assignment getGreetingsAssignment_1() { return cGreetingsAssignment_1; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_1_0() { return cGreetingsGreetingParserRuleCall_1_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFirstnameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFnSTRINGTerminalRuleCall_3_0 = (RuleCall)cFnAssignment_3.eContents().get(0);
		private final Keyword cLastnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLnSTRINGTerminalRuleCall_5_0 = (RuleCall)cLnAssignment_5.eContents().get(0);
		
		//Person:
		//	"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING;
		public ParserRule getRule() { return rule; }

		//"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING
		public Group getGroup() { return cGroup; }

		//"Person"
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"firstname"
		public Keyword getFirstnameKeyword_2() { return cFirstnameKeyword_2; }

		//fn=STRING
		public Assignment getFnAssignment_3() { return cFnAssignment_3; }

		//STRING
		public RuleCall getFnSTRINGTerminalRuleCall_3_0() { return cFnSTRINGTerminalRuleCall_3_0; }

		//"lastname"
		public Keyword getLastnameKeyword_4() { return cLastnameKeyword_4; }

		//ln=STRING
		public Assignment getLnAssignment_5() { return cLnAssignment_5; }

		//STRING
		public RuleCall getLnSTRINGTerminalRuleCall_5_0() { return cLnSTRINGTerminalRuleCall_5_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGreetwordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGreetwordGreetwordEnumRuleCall_0_0 = (RuleCall)cGreetwordAssignment_0.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonPersonCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	greetword=Greetword person=[Person] "!";
		public ParserRule getRule() { return rule; }

		//greetword=Greetword person=[Person] "!"
		public Group getGroup() { return cGroup; }

		//greetword=Greetword
		public Assignment getGreetwordAssignment_0() { return cGreetwordAssignment_0; }

		//Greetword
		public RuleCall getGreetwordGreetwordEnumRuleCall_0_0() { return cGreetwordGreetwordEnumRuleCall_0_0; }

		//person=[Person]
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }

		//[Person]
		public CrossReference getPersonPersonCrossReference_1_0() { return cPersonPersonCrossReference_1_0; }

		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_1_0_1() { return cPersonPersonIDTerminalRuleCall_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	
	
	public class GreetwordElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Greetword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEHalloKeyword_0_0 = (Keyword)cDEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEHuhuKeyword_1_0 = (Keyword)cDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cENHelloKeyword_2_0 = (Keyword)cENEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFRBonjourKeyword_3_0 = (Keyword)cFREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Greetword:
		//	DE="Hallo" | DE="Huhu" | EN="Hello" | FR="Bonjour";
		public EnumRule getRule() { return rule; }

		//DE="Hallo" | DE="Huhu" | EN="Hello" | FR="Bonjour"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DE="Hallo"
		public EnumLiteralDeclaration getDEEnumLiteralDeclaration_0() { return cDEEnumLiteralDeclaration_0; }

		//"Hallo"
		public Keyword getDEHalloKeyword_0_0() { return cDEHalloKeyword_0_0; }

		//DE="Huhu"
		public EnumLiteralDeclaration getDEEnumLiteralDeclaration_1() { return cDEEnumLiteralDeclaration_1; }

		//"Huhu"
		public Keyword getDEHuhuKeyword_1_0() { return cDEHuhuKeyword_1_0; }

		//EN="Hello"
		public EnumLiteralDeclaration getENEnumLiteralDeclaration_2() { return cENEnumLiteralDeclaration_2; }

		//"Hello"
		public Keyword getENHelloKeyword_2_0() { return cENHelloKeyword_2_0; }

		//FR="Bonjour"
		public EnumLiteralDeclaration getFREnumLiteralDeclaration_3() { return cFREnumLiteralDeclaration_3; }

		//"Bonjour"
		public Keyword getFRBonjourKeyword_3_0() { return cFRBonjourKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private PersonElements pPerson;
	private GreetingElements pGreeting;
	private GreetwordElements unknownRuleGreetword;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreeterGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.senacor.mdsd.hh.greeter.Greeter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ###########################################
	//// Variante 1
	////
	//// Eine Liste von beliebig vielen Gruessen
	//// 'Hello' und '!' werden als Keywords betrachtet
	//// Als Name wird ein String (in Anfuehrungszeichen) erwartet
	////
	//// Model:
	////   greetings+=Greeting*
	//// ;
	////	
	//// Greeting:
	////   'Hello' name=STRING '!'
	//// ;
	//// ###########################################
	//// Variante 1b 
	////
	//// Analog 1, allerdings wird als Name eine Id erwartet (Zeichenkette ohne Anfuehrungszeichen)
	////
	//// Model:
	////   greetings+=Greeting*
	//// ;
	////	
	//// Greeting:
	////   'Hello' name=ID '!'
	//// ;
	//// ###########################################
	//// Variante 2
	////
	//// Das Grusswort ist in eine eigene Regel ausgelagert, akzeptiert werden
	//// zwei verschiedene Keywords
	////  
	//// Model:
	////	greetings+=Greeting*
	//// ;
	////
	//// Greeting:
	////	Word name=STRING '!'
	//// ;
	////
	//// Word:
	////	'Hello'|'Hallo'
	//// ;
	//// ###########################################
	//// Variante 3
	////
	//// Das Grusswort ist kein Keyword mehr, sondern eine Enum. Enums sind
	//// "Platzhalter" liefern Datentypen und keine Keywords. Deshalb muss eine
	//// Zuweisung an eine Variable erfolgen. Mehrere symbolische Werte koennen
	//// auf eine Enum-Id abgebildet werden.
	//// 
	//// Model:
	////	greetings+=Greeting*
	//// ;	
	//// 
	//// Greeting:
	////	word=Word name=STRING '!'
	//// ;
	////	
	//// enum Word:
	////  DE='Hallo' | DE='Huhu' | 
	////  EN='Hello' | 
	////  FR='Bonjour'
	//// ;
	//// ###########################################
	//// Variante 4
	//// 
	//// Gruss und Person werden nun getrennt voneinander definiert, der Gruss
	//// referenziert die Person. Es kann ueber Dateigrenzen hinweg referenziert
	//// werden - AA ist in einer anderen Datei definiert.
	//Model:
	//	persons+=Person* greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Person:
	//	"Person" name=ID "firstname" fn=STRING "lastname" ln=STRING;
	public PersonElements getPersonAccess() {
		return (pPerson != null) ? pPerson : (pPerson = new PersonElements());
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Greeting:
	//	greetword=Greetword person=[Person] "!";
	public GreetingElements getGreetingAccess() {
		return (pGreeting != null) ? pGreeting : (pGreeting = new GreetingElements());
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//enum Greetword:
	//	DE="Hallo" | DE="Huhu" | EN="Hello" | FR="Bonjour";
	public GreetwordElements getGreetwordAccess() {
		return (unknownRuleGreetword != null) ? unknownRuleGreetword : (unknownRuleGreetword = new GreetwordElements());
	}
	
	public EnumRule getGreetwordRule() {
		return getGreetwordAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
