/*
* generated by Xtext
*/
grammar InternalGreeterDsl01;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.senacor.mdsd.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.senacor.mdsd.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.senacor.mdsd.services.GreeterDsl01GrammarAccess;

}

@parser::members {
 
 	private GreeterDsl01GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GreeterDsl01GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreeting
entryRuleGreeting 
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreetingAccess().getGroup()); }
(rule__Greeting__Group__0)
{ after(grammarAccess.getGreetingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreetword
entryRuleGreetword 
:
{ before(grammarAccess.getGreetwordRule()); }
	 ruleGreetword
{ after(grammarAccess.getGreetwordRule()); } 
	 EOF 
;

// Rule Greetword
ruleGreetword
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreetwordAccess().getGroup()); }
(rule__Greetword__Group__0)
{ after(grammarAccess.getGreetwordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGrusswort
entryRuleGrusswort 
:
{ before(grammarAccess.getGrusswortRule()); }
	 ruleGrusswort
{ after(grammarAccess.getGrusswortRule()); } 
	 EOF 
;

// Rule Grusswort
ruleGrusswort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGrusswortAccess().getGroup()); }
(rule__Grusswort__Group__0)
{ after(grammarAccess.getGrusswortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGW
entryRuleGW 
:
{ before(grammarAccess.getGWRule()); }
	 ruleGW
{ after(grammarAccess.getGWRule()); } 
	 EOF 
;

// Rule GW
ruleGW
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGWAccess().getGroup()); }
(rule__GW__Group__0)
{ after(grammarAccess.getGWAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Greeting__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getGreetwordParserRuleCall_0_0()); }
	ruleGreetword
{ after(grammarAccess.getGreetingAccess().getGreetwordParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getGreetingAccess().getGrusswortParserRuleCall_0_1()); }
	ruleGrusswort
{ after(grammarAccess.getGreetingAccess().getGrusswortParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getGreetingAccess().getGWParserRuleCall_0_2()); }
	ruleGW
{ after(grammarAccess.getGreetingAccess().getGWParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStartKeyword_1()); }

	'start' 

{ after(grammarAccess.getModelAccess().getStartKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment_2()); }
(rule__Model__GreetingsAssignment_2)*
{ after(grammarAccess.getModelAccess().getGreetingsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Greeting__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getAlternatives_0()); }
(rule__Greeting__Alternatives_0)
{ after(grammarAccess.getGreetingAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getAdressatAssignment_1()); }
(rule__Greeting__AdressatAssignment_1)
{ after(grammarAccess.getGreetingAccess().getAdressatAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greeting__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }

	'!' 

{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Greetword__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greetword__Group__0__Impl
	rule__Greetword__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greetword__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetwordAccess().getFooAction_0()); }
(

)
{ after(grammarAccess.getGreetwordAccess().getFooAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Greetword__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Greetword__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greetword__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetwordAccess().getHelloKeyword_1()); }

	'Hello' 

{ after(grammarAccess.getGreetwordAccess().getHelloKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Grusswort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grusswort__Group__0__Impl
	rule__Grusswort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grusswort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrusswortAccess().getFooAction_0()); }
(

)
{ after(grammarAccess.getGrusswortAccess().getFooAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Grusswort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Grusswort__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grusswort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGrusswortAccess().getHalloKeyword_1()); }

	'Hallo' 

{ after(grammarAccess.getGrusswortAccess().getHalloKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GW__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GW__Group__0__Impl
	rule__GW__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GW__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGWAccess().getMyGreetwordAction_0()); }
(

)
{ after(grammarAccess.getGWAccess().getMyGreetwordAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GW__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GW__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GW__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGWAccess().getBonJourKeyword_1()); }

	'Bon jour' 

{ after(grammarAccess.getGWAccess().getBonJourKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GreetingsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_2_0()); }
	ruleGreeting{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__AdressatAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getAdressatSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getGreetingAccess().getAdressatSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


