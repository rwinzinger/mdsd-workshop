/*
* generated by Xtext
*/
grammar InternalGreeterDsl01;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.senacor.mdsd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.senacor.mdsd.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.senacor.mdsd.services.GreeterDsl01GrammarAccess;

}

@parser::members {

 	private GreeterDsl01GrammarAccess grammarAccess;
 	
    public InternalGreeterDsl01Parser(TokenStream input, GreeterDsl01GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GreeterDsl01GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='start' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getStartKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_2_0()); 
	    }
		lv_greetings_2_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_2_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getGreetingAccess().getGreetwordParserRuleCall_0_0()); 
    }
    this_Greetword_0=ruleGreetword
    { 
        $current = $this_Greetword_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGreetingAccess().getGrusswortParserRuleCall_0_1()); 
    }
    this_Grusswort_1=ruleGrusswort
    { 
        $current = $this_Grusswort_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGreetingAccess().getGWParserRuleCall_0_2()); 
    }
    this_GW_2=ruleGW
    { 
        $current = $this_GW_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		lv_adressat_3_0=RULE_STRING
		{
			newLeafNode(lv_adressat_3_0, grammarAccess.getGreetingAccess().getAdressatSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"adressat",
        		lv_adressat_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
    }
)
;





// Entry rule entryRuleGreetword
entryRuleGreetword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetwordRule()); }
	 iv_ruleGreetword=ruleGreetword 
	 { $current=$iv_ruleGreetword.current; } 
	 EOF 
;

// Rule Greetword
ruleGreetword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGreetwordAccess().getFooAction_0(),
            $current);
    }
)	otherlv_1='Hello' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGreetwordAccess().getHelloKeyword_1());
    }
)
;





// Entry rule entryRuleGrusswort
entryRuleGrusswort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGrusswortRule()); }
	 iv_ruleGrusswort=ruleGrusswort 
	 { $current=$iv_ruleGrusswort.current; } 
	 EOF 
;

// Rule Grusswort
ruleGrusswort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGrusswortAccess().getFooAction_0(),
            $current);
    }
)	otherlv_1='Hallo' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGrusswortAccess().getHalloKeyword_1());
    }
)
;





// Entry rule entryRuleGW
entryRuleGW returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGWRule()); }
	 iv_ruleGW=ruleGW 
	 { $current=$iv_ruleGW.current; } 
	 EOF 
;

// Rule GW
ruleGW returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGWAccess().getMyGreetwordAction_0(),
            $current);
    }
)	otherlv_1='Bon jour' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGWAccess().getBonJourKeyword_1());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


