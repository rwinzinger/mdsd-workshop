/*
* generated by Xtext
*/

package com.senacor.mdsd.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GreeterDsl01GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGreetingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGreetingsGreetingParserRuleCall_2_0 = (RuleCall)cGreetingsAssignment_2.eContents().get(0);
		
		//// import "http://www.senacor.com/mdsd/GreeterDsl01"
		//Model:
		//	{Model} "start" greetings+=Greeting*;
		public ParserRule getRule() { return rule; }

		//{Model} "start" greetings+=Greeting*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"start"
		public Keyword getStartKeyword_1() { return cStartKeyword_1; }

		//greetings+=Greeting*
		public Assignment getGreetingsAssignment_2() { return cGreetingsAssignment_2; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_2_0() { return cGreetingsGreetingParserRuleCall_2_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cGreetwordParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cGrusswortParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cGWParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cAdressatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdressatSTRINGTerminalRuleCall_1_0 = (RuleCall)cAdressatAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	(Greetword | Grusswort | GW) adressat=STRING "!";
		public ParserRule getRule() { return rule; }

		//(Greetword | Grusswort | GW) adressat=STRING "!"
		public Group getGroup() { return cGroup; }

		//Greetword | Grusswort | GW
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Greetword
		public RuleCall getGreetwordParserRuleCall_0_0() { return cGreetwordParserRuleCall_0_0; }

		//Grusswort
		public RuleCall getGrusswortParserRuleCall_0_1() { return cGrusswortParserRuleCall_0_1; }

		//GW
		public RuleCall getGWParserRuleCall_0_2() { return cGWParserRuleCall_0_2; }

		//adressat=STRING
		public Assignment getAdressatAssignment_1() { return cAdressatAssignment_1; }

		//STRING
		public RuleCall getAdressatSTRINGTerminalRuleCall_1_0() { return cAdressatSTRINGTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}

	public class GreetwordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greetword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFooAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHelloKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Greetword returns MyGreetword:
		//	{Foo} "Hello";
		public ParserRule getRule() { return rule; }

		//{Foo} "Hello"
		public Group getGroup() { return cGroup; }

		//{Foo}
		public Action getFooAction_0() { return cFooAction_0; }

		//"Hello"
		public Keyword getHelloKeyword_1() { return cHelloKeyword_1; }
	}

	public class GrusswortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grusswort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFooAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHalloKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Grusswort returns MyGreetword:
		//	{Foo} "Hallo";
		public ParserRule getRule() { return rule; }

		//{Foo} "Hallo"
		public Group getGroup() { return cGroup; }

		//{Foo}
		public Action getFooAction_0() { return cFooAction_0; }

		//"Hallo"
		public Keyword getHalloKeyword_1() { return cHalloKeyword_1; }
	}

	public class GWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyGreetwordAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBonJourKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GW:
		//	{MyGreetword} "Bon jour";
		public ParserRule getRule() { return rule; }

		//{MyGreetword} "Bon jour"
		public Group getGroup() { return cGroup; }

		//{MyGreetword}
		public Action getMyGreetwordAction_0() { return cMyGreetwordAction_0; }

		//"Bon jour"
		public Keyword getBonJourKeyword_1() { return cBonJourKeyword_1; }
	}
	
	
	private ModelElements pModel;
	private GreetingElements pGreeting;
	private GreetwordElements pGreetword;
	private GrusswortElements pGrusswort;
	private GWElements pGW;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GreeterDsl01GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.senacor.mdsd.GreeterDsl01".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// import "http://www.senacor.com/mdsd/GreeterDsl01"
	//Model:
	//	{Model} "start" greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	(Greetword | Grusswort | GW) adressat=STRING "!";
	public GreetingElements getGreetingAccess() {
		return (pGreeting != null) ? pGreeting : (pGreeting = new GreetingElements());
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//Greetword returns MyGreetword:
	//	{Foo} "Hello";
	public GreetwordElements getGreetwordAccess() {
		return (pGreetword != null) ? pGreetword : (pGreetword = new GreetwordElements());
	}
	
	public ParserRule getGreetwordRule() {
		return getGreetwordAccess().getRule();
	}

	//Grusswort returns MyGreetword:
	//	{Foo} "Hallo";
	public GrusswortElements getGrusswortAccess() {
		return (pGrusswort != null) ? pGrusswort : (pGrusswort = new GrusswortElements());
	}
	
	public ParserRule getGrusswortRule() {
		return getGrusswortAccess().getRule();
	}

	//GW:
	//	{MyGreetword} "Bon jour";
	public GWElements getGWAccess() {
		return (pGW != null) ? pGW : (pGW = new GWElements());
	}
	
	public ParserRule getGWRule() {
		return getGWAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
