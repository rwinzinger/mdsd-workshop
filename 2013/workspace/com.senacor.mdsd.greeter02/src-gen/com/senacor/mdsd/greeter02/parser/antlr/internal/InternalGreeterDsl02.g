/*
* generated by Xtext
*/
grammar InternalGreeterDsl02;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.senacor.mdsd.greeter02.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.senacor.mdsd.greeter02.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.senacor.mdsd.greeter02.services.GreeterDsl02GrammarAccess;

}

@parser::members {

 	private GreeterDsl02GrammarAccess grammarAccess;
 	
    public InternalGreeterDsl02Parser(TokenStream input, GreeterDsl02GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GreeterDsl02GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Persons' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPersonsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_2_0()); 
	    }
		lv_persons_2_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"persons",
        		lv_persons_2_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4='Greetings' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getGreetingsKeyword_4());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_6_0()); 
	    }
		lv_greetings_6_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_6_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='firstname' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPersonAccess().getFirstnameKeyword_1());
    }
(
(
		lv_firstname_2_0=RULE_ID
		{
			newLeafNode(lv_firstname_2_0, grammarAccess.getPersonAccess().getFirstnameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"firstname",
        		lv_firstname_2_0, 
        		"ID");
	    }

)
)	otherlv_3='lastname' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPersonAccess().getLastnameKeyword_3());
    }
(
(
		lv_lastname_4_0=RULE_ID
		{
			newLeafNode(lv_lastname_4_0, grammarAccess.getPersonAccess().getLastnameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lastname",
        		lv_lastname_4_0, 
        		"ID");
	    }

)
)(
(
(
		lv_gender_5_1=	'w' 
    {
        newLeafNode(lv_gender_5_1, grammarAccess.getPersonAccess().getGenderWKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed($current, "gender", lv_gender_5_1, null);
	    }

    |		lv_gender_5_2=	'm' 
    {
        newLeafNode(lv_gender_5_2, grammarAccess.getPersonAccess().getGenderMKeyword_5_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed($current, "gender", lv_gender_5_2, null);
	    }

)

)
))
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGreetingAccess().getWordGreetwordEnumRuleCall_0_0()); 
	    }
		lv_word_0_0=ruleGreetword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGreetingRule());
	        }
       		set(
       			$current, 
       			"word",
        		lv_word_0_0, 
        		"Greetword");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getGreetingAccess().getPersonPersonCrossReference_1_0()); 
	}

)
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
    }
)
;





// Rule Greetword
ruleGreetword returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Hallo' 
	{
        $current = grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGreetwordAccess().getDEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Hello' 
	{
        $current = grammarAccess.getGreetwordAccess().getENEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGreetwordAccess().getENEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Bonjour' 
	{
        $current = grammarAccess.getGreetwordAccess().getFREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGreetwordAccess().getFREnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


