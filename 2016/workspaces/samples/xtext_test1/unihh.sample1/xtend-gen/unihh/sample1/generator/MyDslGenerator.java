/**
 * generated by Xtext 2.9.0
 */
package unihh.sample1.generator;

import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import unihh.sample1.myDsl.Aggregate;
import unihh.sample1.myDsl.Context;
import unihh.sample1.myDsl.Model;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = input.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    for (final EObject e : _iterable) {
      MyDslGenerator.generateCode(e, fsa);
    }
  }
  
  protected String _dump(final EObject eo) {
    EClass _eClass = eo.eClass();
    String _name = _eClass.getName();
    return ("Modell-Element gefunden ... Typ: " + _name);
  }
  
  /**
   * def static dispatch generateCode(Model m, IFileSystemAccess fsa) {
   * fsa.generateFile("foo/bar/Greeter.java", content(m))
   * }
   */
  protected static Object _generateCode(final EObject c, final IFileSystemAccess fsa) {
    return null;
  }
  
  protected static Object _generateCode(final Context c, final IFileSystemAccess fsa) {
    String _name = c.getName();
    String _plus = ("unihh/services/Abstract" + _name);
    String _plus_1 = (_plus + "Service.java");
    CharSequence _contentAbstract = MyDslGenerator.contentAbstract(c);
    fsa.generateFile(_plus_1, _contentAbstract);
    String _name_1 = c.getName();
    String _plus_2 = ("unihh/services/" + _name_1);
    String _plus_3 = (_plus_2 + "Service.java");
    CharSequence _contentConcrete = MyDslGenerator.contentConcrete(c);
    fsa.generateFile(_plus_3, _contentConcrete);
    return null;
  }
  
  private static CharSequence _content(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("model goes here");
    _builder.newLine();
    return _builder;
  }
  
  private static CharSequence _contentAbstract(final Context c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package unihh.services;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Abstract");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append("Service {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// empty");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private static CharSequence _contentConcrete(final Context c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package unihh.services;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.PathVariable;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMapping;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RequestMethod;");
    _builder.newLine();
    _builder.append("import org.springframework.web.bind.annotation.RestController;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@RestController");
    _builder.newLine();
    _builder.append("@RequestMapping(value = \"/api/v1/");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_1 = c.getName();
    _builder.append(_name_1, "");
    _builder.append("Service {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("@RequestMapping(value = \"/info\", method = RequestMethod.GET, produces = \"application/json\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String versionInfo() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"some version here\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Aggregate> _aggregates = c.getAggregates();
      for(final Aggregate a : _aggregates) {
        _builder.append("\t");
        _builder.append("@RequestMapping(value = \"/");
        String _name_2 = a.getName();
        _builder.append(_name_2, "\t");
        _builder.append("/{id}\", method = RequestMethod.GET, produces = \"application/json\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public String get");
        String _name_3 = a.getName();
        _builder.append(_name_3, "\t");
        _builder.append("(@PathVariable(\"id\") Integer id) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return \"value for ");
        String _name_4 = a.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(" with id \'\"+id+\"\' from database\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String dump(final EObject eo) {
    return _dump(eo);
  }
  
  public static Object generateCode(final EObject c, final IFileSystemAccess fsa) {
    if (c instanceof Context) {
      return _generateCode((Context)c, fsa);
    } else if (c != null) {
      return _generateCode(c, fsa);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(c, fsa).toString());
    }
  }
  
  private static CharSequence content(final Model m) {
    return _content(m);
  }
  
  private static CharSequence contentAbstract(final Context c) {
    return _contentAbstract(c);
  }
  
  private static CharSequence contentConcrete(final Context c) {
    return _contentConcrete(c);
  }
}
