/*
 * generated by Xtext 2.9.0
 */
package unihh.sample1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFooAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDomainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainsDomainParserRuleCall_3_0 = (RuleCall)cDomainsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBoundedContextsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContextsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContextsContextParserRuleCall_7_0 = (RuleCall)cContextsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cAggregatesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAggregatesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAggregatesAggregateParserRuleCall_11_0 = (RuleCall)cAggregatesAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Model:
		//	{foo}
		//	'Domains' '{'
		//	domains+=Domain*
		//	'}'
		//	'Bounded Contexts' '{'
		//	contexts+=Context*
		//	'}'
		//	'Aggregates' '{'
		//	aggregates+=Aggregate*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{foo} 'Domains' '{' domains+=Domain* '}' 'Bounded Contexts' '{' contexts+=Context* '}' 'Aggregates' '{'
		//aggregates+=Aggregate* '}'
		public Group getGroup() { return cGroup; }
		
		//{foo}
		public Action getFooAction_0() { return cFooAction_0; }
		
		//'Domains'
		public Keyword getDomainsKeyword_1() { return cDomainsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//domains+=Domain*
		public Assignment getDomainsAssignment_3() { return cDomainsAssignment_3; }
		
		//Domain
		public RuleCall getDomainsDomainParserRuleCall_3_0() { return cDomainsDomainParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//'Bounded Contexts'
		public Keyword getBoundedContextsKeyword_5() { return cBoundedContextsKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//contexts+=Context*
		public Assignment getContextsAssignment_7() { return cContextsAssignment_7; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_7_0() { return cContextsContextParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'Aggregates'
		public Keyword getAggregatesKeyword_9() { return cAggregatesKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//aggregates+=Aggregate*
		public Assignment getAggregatesAssignment_11() { return cAggregatesAssignment_11; }
		
		//Aggregate
		public RuleCall getAggregatesAggregateParserRuleCall_11_0() { return cAggregatesAggregateParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cDescKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Domain:
		//	name=ID 'desc' description=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'desc' description=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'desc'
		public Keyword getDescKeyword_1() { return cDescKeyword_1; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAggregatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAggregatesAggregateCrossReference_2_0 = (CrossReference)cAggregatesAssignment_2.eContents().get(0);
		private final RuleCall cAggregatesAggregateIDTerminalRuleCall_2_0_1 = (RuleCall)cAggregatesAggregateCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Context:
		//	name=ID '{'
		//	aggregates+=[Aggregate]*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' aggregates+=[Aggregate]* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//aggregates+=[Aggregate]*
		public Assignment getAggregatesAssignment_2() { return cAggregatesAssignment_2; }
		
		//[Aggregate]
		public CrossReference getAggregatesAggregateCrossReference_2_0() { return cAggregatesAggregateCrossReference_2_0; }
		
		//ID
		public RuleCall getAggregatesAggregateIDTerminalRuleCall_2_0_1() { return cAggregatesAggregateIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Aggregate:
		//	name=ID '{'
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "unihh.sample1.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cT_STRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cT_STRINGStringKeyword_0_0 = (Keyword)cT_STRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cT_INTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cT_INTIntKeyword_1_0 = (Keyword)cT_INTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Type:
		//	T_STRING='String' | T_INT='Int';
		public EnumRule getRule() { return rule; }
		
		//T_STRING='String' | T_INT='Int'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//T_STRING='String'
		public EnumLiteralDeclaration getT_STRINGEnumLiteralDeclaration_0() { return cT_STRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getT_STRINGStringKeyword_0_0() { return cT_STRINGStringKeyword_0_0; }
		
		//T_INT='Int'
		public EnumLiteralDeclaration getT_INTEnumLiteralDeclaration_1() { return cT_INTEnumLiteralDeclaration_1; }
		
		//'Int'
		public Keyword getT_INTIntKeyword_1_0() { return cT_INTIntKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final DomainElements pDomain;
	private final ContextElements pContext;
	private final AggregateElements pAggregate;
	private final AttributeElements pAttribute;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDomain = new DomainElements();
		this.pContext = new ContextElements();
		this.pAggregate = new AggregateElements();
		this.pAttribute = new AttributeElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("unihh.sample1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{foo}
	//	'Domains' '{'
	//	domains+=Domain*
	//	'}'
	//	'Bounded Contexts' '{'
	//	contexts+=Context*
	//	'}'
	//	'Aggregates' '{'
	//	aggregates+=Aggregate*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Domain:
	//	name=ID 'desc' description=STRING;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Context:
	//	name=ID '{'
	//	aggregates+=[Aggregate]*
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Aggregate:
	//	name=ID '{'
	//	attributes+=Attribute*
	//	'}';
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' type=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum Type:
	//	T_STRING='String' | T_INT='Int';
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
