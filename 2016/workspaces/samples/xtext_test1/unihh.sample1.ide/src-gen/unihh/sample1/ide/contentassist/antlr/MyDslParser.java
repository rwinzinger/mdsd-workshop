/*
 * generated by Xtext 2.9.0
 */
package unihh.sample1.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import unihh.sample1.ide.contentassist.antlr.internal.InternalMyDslParser;
import unihh.sample1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
					put(grammarAccess.getAggregateAccess().getGroup(), "rule__Aggregate__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getModelAccess().getDomainsAssignment_3(), "rule__Model__DomainsAssignment_3");
					put(grammarAccess.getModelAccess().getContextsAssignment_7(), "rule__Model__ContextsAssignment_7");
					put(grammarAccess.getModelAccess().getAggregatesAssignment_11(), "rule__Model__AggregatesAssignment_11");
					put(grammarAccess.getDomainAccess().getNameAssignment_0(), "rule__Domain__NameAssignment_0");
					put(grammarAccess.getDomainAccess().getDescriptionAssignment_2(), "rule__Domain__DescriptionAssignment_2");
					put(grammarAccess.getContextAccess().getNameAssignment_0(), "rule__Context__NameAssignment_0");
					put(grammarAccess.getContextAccess().getAggregatesAssignment_2(), "rule__Context__AggregatesAssignment_2");
					put(grammarAccess.getAggregateAccess().getNameAssignment_0(), "rule__Aggregate__NameAssignment_0");
					put(grammarAccess.getAggregateAccess().getAttributesAssignment_2(), "rule__Aggregate__AttributesAssignment_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
