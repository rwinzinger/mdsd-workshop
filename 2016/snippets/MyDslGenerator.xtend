/*
 * generated by Xtext 2.9.0
 */
package unihh.sample1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.generator.IFileSystemAccess
import unihh.sample1.myDsl.Model
import unihh.sample1.myDsl.Context

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	override doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e: input.allContents.toIterable) {
			// System::out.println(e.dump)
			e.generateCode(fsa)
		}	
	}
	
	def dispatch dump(EObject eo) {
		"Modell-Element gefunden ... Typ: "+eo.eClass.name	
	} 
	
	/*
	def static dispatch generateCode(Model m, IFileSystemAccess fsa) {
		fsa.generateFile("foo/bar/Greeter.java", content(m))	
	}
	*/
	
	def static dispatch generateCode(EObject c, IFileSystemAccess fsa) {
		// ignore
	}

	def static dispatch generateCode(Context c, IFileSystemAccess fsa) {
		fsa.generateFile("unihh/services/Abstract"+c.name+"Service.java", contentAbstract(c))	
		fsa.generateFile("unihh/services/"+c.name+"Service.java", contentConcrete(c))	
	}
	
	def private static dispatch content(Model m) '''
	model goes here
	'''
	
	def private static dispatch contentAbstract(Context c) '''
	package unihh.services;
	
	public abstract class Abstract«c.name»Service {
		// empty
	}
	'''
	
	def private static dispatch contentConcrete(Context c) '''
	package unihh.services;
	
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RestController;
	
	@RestController
	@RequestMapping(value = "/api/v1/«c.name»")
	public class «c.name»Service {
		@RequestMapping(value = "/info", method = RequestMethod.GET, produces = "application/json")
		public String versionInfo() {
			return "some version here";
		}
		
		«FOR a:c.aggregates»
		@RequestMapping(value = "/«a.name»/{id}", method = RequestMethod.GET, produces = "application/json")
		public String get«a.name»(@PathVariable("id") Integer id) {
			return "value for «a.name» with id '"+id+"' from database";
		}
		
		«ENDFOR»
	}
	'''
	
}
